{"version":3,"sources":["Map.js","Sidebar.js","App.js","index.js"],"names":["Map","props","map","src","alt","Sidebar","locationList","features","item","index","key","place_name","this","hidden","placeList","renderLocationList","Fragment","onSubmit","e","preventDefault","htmlFor","aria-controls","type","id","name","placeholder","onChange","target","value","React","Component","App","state","navHidden","searchTerm","searchResults","geoJson","fetch","then","res","ok","blob","Promise","reject","statusText","imgUrl","URL","createObjectURL","setState","catch","err","error","geoObject","geometry","coordinates","center","properties","JSON","stringify","json","currentGeoJson","createGeoJson","loadEmptyMap","prevProps","prevState","searchMap","showPins","event","val","className","onClick","toggleNav","searchString","getSearchString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1dd9612.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Map(props) {\n    if(props.map) {\n        return (\n            <div>\n                <img src={props.map} alt='portland map'/>\n            </div>\n        )\n    }\n    else return null\n}","import React from 'react'\n\nexport default class Sidebar extends React.Component {\n    renderLocationList(locationList) {\n        if(locationList !== null) {\n            return locationList.features.map((item, index) => \n                <li key={index}>\n                    <p>Pin #: {index+1}</p>\n                    <p>{item.place_name}</p>\n                </li>\n            )\n        }\n    }\n    render(){\n        if (this.props.hidden === false && this.props.placeList !== null) {\n            let locationList = this.renderLocationList(this.props.placeList) \n            return (\n                <React.Fragment>\n                    <form onSubmit={e => e.preventDefault()}>\n                        <label htmlFor=\"search\">Search</label>&emsp;\n                            <input\n                                aria-controls=\"character-count\"\n                                type=\"search\"\n                                id=\"search\"\n                                name=\"search\"\n                                placeholder=\"Starbucks\" \n                                onChange={e => this.props.onChange(e.target.value)}\n                                />\n                    </form>\n                    <ul>\n                        {locationList}\n                    </ul>\n                </React.Fragment>\n            )\n        }\n        else if (this.props.hidden === false && this.props.placeList === null) {\n            return (\n                <React.Fragment>\n                    <form onSubmit={e => e.preventDefault()}>\n                        <label htmlFor=\"search\">Search</label>&emsp;\n                            <input\n                                aria-controls=\"character-count\"\n                                type=\"search\"\n                                id=\"search\"\n                                name=\"search\"\n                                placeholder=\"Starbucks\" \n                                onChange={e => this.props.onChange(e.target.value)}\n            />\n        </form>\n                </React.Fragment>\n            )\n        }\n        return null\n    }\n}","import React from 'react';\nimport Map from './Map'\nimport SideBar from './Sidebar'\nimport 'normalize.css'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      map: \"\",\n      navHidden: false,\n      searchTerm: \"\",\n      searchResults: null,\n      geoJson: null\n    }\n  }\n  loadEmptyMap() {\n    fetch('https://api.mapbox.com/styles/v1/mapbox/dark-v10/static/-122.6619,45.5267,10,0,0/1000x1000?access_token=pk.eyJ1IjoiamFlODE5MSIsImEiOiJjanpuOXA3eGowMXdpM21vOWhvZ3ljb3A0In0.NI2-cQJJXyTdJ7J-bZOBFw')\n      .then(res => {\n        if (!res.ok) {\n          return Promise.reject(res.statusText);\n      }\n        return res.blob()\n      })\n      .then(blob => {\n        let imgUrl =  URL.createObjectURL(blob)\n        this.setState({\n          ...this.state,\n          map: imgUrl\n        })\n      })\n      .catch(err =>\n        this.setState({\n            error: 'Could not load map',\n        })\n      )\n  }\n  createGeoJson(searchResults) {\n    let placeList = searchResults.features.map((item, index) => {\n      return  ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: item.center,\n          },\n          properties: {\n            \"marker-symbol\": index+1\n          }\n        })\n      })\n    let geoObject = {\n      type: \"FeatureCollection\",\n      features: placeList,\n    }\n    let geoJson = JSON.stringify(geoObject)\n    return geoJson\n  }\n  searchMap(searchTerm) {\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${searchTerm}.json?bbox=-122.763358,45.433492,-122.484561,45.648356&access_token=pk.eyJ1IjoiamFlODE5MSIsImEiOiJjanpuOXA3eGowMXdpM21vOWhvZ3ljb3A0In0.NI2-cQJJXyTdJ7J-bZOBFw`)\n      .then(res => {\n        if (!res.ok) {\n          return Promise.reject(res.statusText);\n      }\n        return res.json()\n      })\n      .then(res => {\n        let currentGeoJson = this.createGeoJson(res)\n        this.setState({\n          ...this.state,\n          searchResults: res,\n          geoJson: currentGeoJson\n        })\n      })\n      .catch(err =>\n        this.setState({\n            error: 'Could not load results',\n        })\n      )\n  }\n  showPins(geoJson) {\n    fetch(`https://api.mapbox.com/styles/v1/mapbox/dark-v10/static/geojson(${geoJson})/-122.6619,45.5267,10,0,0/1000x1000?access_token=pk.eyJ1IjoiamFlODE5MSIsImEiOiJjanpuOXA3eGowMXdpM21vOWhvZ3ljb3A0In0.NI2-cQJJXyTdJ7J-bZOBFw`)\n    .then(res => {\n      if (!res.ok) {\n        return Promise.reject(res.statusText);\n    }\n      return res.blob()\n    })\n    .then(blob => {\n      let imgUrl =  URL.createObjectURL(blob)\n      this.setState({\n        ...this.state,\n        map: imgUrl\n      })\n    })\n    .catch(err =>\n      this.setState({\n          error: 'Could not load map',\n      })\n    )\n  }\n  componentDidMount() {\n     this.loadEmptyMap()\n  }\n  componentDidUpdate(prevProps, prevState) {\n      if(this.state.searchTerm !== prevState.searchTerm && this.state.searchTerm !== \"\") {\n        this.searchMap(this.state.searchTerm)\n      }\n      else if(this.state.geoJson !== null && this.state.geoJson !== prevState.geoJson) {\n        this.showPins(this.state.geoJson)\n      }\n      else if (this.state.searchTerm === \"\" && this.state.searchResults !== null) {\n        this.loadEmptyMap()\n        this.setState({\n          ...this.state,\n          searchResults: null\n        })\n      }\n  }\n  toggleNav(event) {\n    event.preventDefault()\n    if(this.state.navHidden === false) {\n      this.setState( {\n        ...this.state,\n        navHidden: true\n      })\n    }\n    else {\n      this.setState({\n        ...this.state,\n        navHidden: false\n      })\n    }\n  }\n  getSearchString(val) {\n    this.setState({\n      ...this.state,\n      searchTerm: val\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='sidebar'>\n        <button onClick={e => this.toggleNav(e)}>Toggle Search</button>\n          <SideBar\n            hidden={this.state.navHidden} \n            onChange={searchString => this.getSearchString(searchString)} \n            placeList={this.state.searchResults}\n            />\n          </div>\n        <Map className=\"map\" map={this.state.map}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}